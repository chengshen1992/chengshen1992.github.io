{
  "hash": "a63c775c59fba3e5351b628a26cd5b5d",
  "result": {
    "markdown": "---\ntitle: \"Create reproducible PMx workflow on MSI\"\nauthor: \"Shen Cheng\"\ndate: \"2024-03-16\"\ncategories: [workflow, code]\nimage: \"image.png\"\n---\n\n\nPharmacometric (PMx) research usually involves computational expansive modeling and simulation processes. High performance computing (HPC) systems provided by Minnesota Supercomputing Institute ([MSI](https://www.msi.umn.edu/)) serves as a valuable platform to perform PMx research. This blog post illustrates a strategy for constructing a collaborative, reproducible and manageable PMx workflow at MSI, leveraging several open-source tools in `R`.\n\n# 1. Connect to VPN\n\nMSI can only be accessed when\n\n-   You are connected to eduroam network on campus.\n\n-   You are off-campus but connected to University's Virtual Private Network VPN. The [procedure](https://it.umn.edu/services-technologies/virtual-private-network-vpn)) to connect to University's VPN. Please make sure when selecting connection channels, do **NOT** select \"UMN - Departmental Pools\".\n\n![](vpn.png)\n\n# 2. Access `R` at MSI\n\n[Several ways](https://www.msi.umn.edu/content/connecting-interactive-hpc-resources) are available to access `R` on MSI. This blog post uses [Open OnDemand](https://www.msi.umn.edu/content/using-open-ondemand) as the portal for he purpose of illustration.\n\nFollowing the access to Open Ondemand, choose Rstudio Server under Interactive Apps tab.\n\n![](R1.png) Then specify the settings for the Rstudio Server session. Please note:\n\n![](R2.png)\n\n-   `NONMEM`, as the primary PMx modeling plateform, has only been installed in HPC `mesabi` and `mangi`, not in `agate`. So if you'd like to use `NONMEM`, please avoid using `agate` as the cluster.\n\n-   Several `R` versions are available, choose consistent `R` version among collaborators will better ensure the reproducibility of the project.\n\nRstudio session will start in a few seconds / minutes (depends on settings) after click on \"Launch\" button.\n\n![](R3.png)\n\n# 3. Build a `Github` repository\n\n`Github` is a useful tool for collaborative coding, facilitating both code review and management. University of Minnesota provides complimentary access to [GitHub Enterprise](https://it.umn.edu/services-technologies/github) for all students and employees possessing an active Internet ID. Taking advantage of University's Github services can significantly enhance the efficiency and experience of PMx project collaboration.\n\nFirst, registering / signing in University of Minnesota GitHub Enterprise. Initialize a new github repository by clicking \"New repository\".\n\n![](Github1.png)\n\nThen, specify the name and visibility and create repository.\n\n![](Github2.png)\n\nIf you have set up your github [SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh) key. Clone the repository into your MSI Rstudio Session through \"terminal\" using the SSH option as shown below.\n\n![](Github3.png)\n\n![](Github4.png)\n\nThe github repository you created should have been successfully cloned in your MSI disk.\n\n![](Github5.png)\n\nYou can now interact with your `github` repository and synchronize your work with collaborators under [`Git`](https://git-scm.com/doc) workflow. \n\n# 4. Using `renv` for package version control\n\n![](renv.png)\n\n[`renv`](https://rstudio.github.io/renv/articles/renv.html) is a useful package to create reproducible `R` environment for each `R` project. Instead of using library of `R` packages installed globally for every project. `renv` allows you to create project-specific library to ensure the `R` package version consistent across a project.\n\n**Step 1:** create a `R` project\n\nYou need to create a `R` project (`.Rproj`) in the cloned github repository.\n\n![](renv1.png)\n\n**Step 2:** Initialize `renv`\n\nIn your `R` console, type in `renv::init()`. This will initialize the structure of a reproducible `R` environment using `renv`, which includes:\n\n![](renv2.png)\n\n-   `.Rprofile`: `R` session will automatically run this script everytime you open this R project (in our case `project-abc.Rproj`), this ensures the automatic activation of `renv`.\n-   `renv/library`: the project library for `R` package installed.\n-   `renv.lock`: a record of `R` packages installed, including all the dependencies.\n\n**Step 3:** Install packages\n\nWith `renv`, we can install a specific `R` package using `renv::install`. For example:\\\n- `renv::install(\"mrgsolve\")` will install `mrgsolve` package from [`CRAN`](https://cran.r-project.org/) - `renv::install(\"metrumresearchgroup/bbr\")` will install latest `bbr` package from `github` of [`metrumresearchgroup`](https://github.com/metrumresearchgroup)\n\nHere, I want to install 5 packages into my project folder:\n\n-   `mrgsolve` from `CRAN`.\n-   `tidyverse` from `CRAN`.\n-   `nmrec` from `github` of `metrumresearchgroup`.\n-   `bbr` from `github` of `metrumresearchgroup`.\n-   `here` from `CRAN`.\n\nI can install them by running:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | echo: false\nrenv::install(\"mrgsolve\", \n              \"tidyverse\", \n              \"metrumresearchgroup/nmrec\",\n              \"metrumresearchgroup/bbr\", \n              \"here\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n- GitHub authentication credentials are not available.\n- Please set GITHUB_PAT, or ensure the 'gitcreds' package is installed.\n- See https://usethis.r-lib.org/articles/git-credentials.html for more details.\nThe following package(s) will be installed:\n- bbr       [metrumresearchgroup/bbr@main]\n- here      [1.0.1]\n- mrgsolve  [1.4.1]\n- nmrec     [metrumresearchgroup/nmrec@main]\n- tidyverse [2.0.0]\nThese packages will be installed into \"~/Documents/Github/chengshen1992/renv/library/R-4.3/x86_64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing mrgsolve ...                       OK [linked from cache]\n- Installing tidyverse ...                      OK [linked from cache]\n- Installing nmrec ...                          OK [linked from cache]\n- Installing bbr ...                            OK [linked from cache]\n- Installing here ...                           OK [linked from cache]\nSuccessfully installed 5 packages in 24 milliseconds.\n```\n:::\n:::\n\n\nWhen asked whether want to proceed, simply answer Y (yes) to proceed to the next step. The installation might take a while depending on the size of the packages, whether these packages were cached and the configuration of the Rstudio session.\n\nWhen the installation finishes, you should see all the requested packages have been installed in the `renv/library` directory.\n\n**Step 4:** Snapshot isntalled packages\n\n`renv::snapshot()` allows you to create a snapshot of the packages installed with the specific source and version information, which allows you collaborators to use `renv::restore()` to restore the same `R` package version in their Rstudio session when necessary. This make sure the reproducibility of the project work when collaborating among sevreral people. \n\nTo do this, we need to create a new R script `library.R` in the project directory. This directory does nothing but simply `library` all the packages installed. \n\nExample code for `library.R`: \n\n::: {.cell}\n\n```{.r .cell-code}\n# | echo: false\nlibrary(mrgsolve)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'mrgsolve'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks mrgsolve::filter(), stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(nmrec)\nlibrary(bbr)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/shencheng/Documents/Github/chengshen1992\n```\n:::\n:::\n\n\nAfter that, we can run `renv::snapshot()` in R console. This will update the `renv.lock` file in the project folder. \n\nYour collaborator will now be able to install the same version of packages on their Rstudio session using `renv::restore()` according to the `renv.lock` updated by you. Similarly, if they updated `renv.lock` on their end, you can run `renv::restore()` to restore their installation. \n\n# 5. Run `NONMEM` using `bbi`\n\n# 6. Acknowledgement\n\nI'd like to thank [**Mutaz Jaber**](https://www.pharmacy.umn.edu/our-faculty-staff/our-faculty/mutaz-jaber) for several valuable discussions on this topic.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}